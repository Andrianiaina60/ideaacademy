version: '3.8'

services:
  # ==================== PostgreSQL pour MLflow ====================
  mlflow-postgres:
    image: postgres:15-alpine
    container_name: mlflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${MLFLOW_POSTGRES_USER:-mlflow}
      POSTGRES_PASSWORD: ${MLFLOW_POSTGRES_PASSWORD:-mlflow}
      POSTGRES_DB: ${MLFLOW_POSTGRES_DB:-mlflow}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - data-platform-net
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MLFLOW_POSTGRES_USER:-mlflow} -d ${MLFLOW_POSTGRES_DB:-mlflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 180s

  # ==================== MinIO pour MLflow ====================
  mlflow-minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    container_name: mlflow-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MLFLOW_MINIO_USER:-mlflow_admin}
      MINIO_ROOT_PASSWORD: ${MLFLOW_MINIO_PASSWORD:-mlflow_admin123}
    networks:
      - data-platform-net
    ports:
      - "9010:9000"
      - "9011:9001"
    volumes:
      - mlflow_minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s

  # ==================== Initialisation MinIO ====================
  mlflow-minio-init:
    image: minio/mc:latest
    container_name: mlflow-minio-init
    depends_on:
      mlflow-minio:
        condition: service_healthy
    networks:
      - data-platform-net
    environment:
      MINIO_USER: ${MLFLOW_MINIO_USER:-mlflow_admin}
      MINIO_PASSWORD: ${MLFLOW_MINIO_PASSWORD:-mlflow_admin123}
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set mlflowminio http://mlflow-minio:9000 $${MINIO_USER} $${MINIO_PASSWORD};
      /usr/bin/mc mb mlflowminio/mlflow --ignore-existing;
      /usr/bin/mc anonymous set download mlflowminio/mlflow;
      echo 'MLflow MinIO bucket created successfully';
      exit 0;
      "
    restart: "no"

  # ==================== MLflow Server ====================
  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mlflow-server
    restart: unless-stopped
    depends_on:
      mlflow-postgres:
        condition: service_healthy
      mlflow-minio-init:
        condition: service_completed_successfully
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://mlflow-minio:9000
      AWS_ACCESS_KEY_ID: ${MLFLOW_MINIO_USER:-mlflow_admin}
      AWS_SECRET_ACCESS_KEY: ${MLFLOW_MINIO_PASSWORD:-mlflow_admin123}
    networks:
      - data-platform-net
    ports:
      - "5000:5000"
    command: >
      mlflow server
      --backend-store-uri postgresql://${MLFLOW_POSTGRES_USER:-mlflow}:${MLFLOW_POSTGRES_PASSWORD:-mlflow}@mlflow-postgres:5432/${MLFLOW_POSTGRES_DB:-mlflow}
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
      --port 5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

# ==================== Volumes ====================
volumes:
  postgres_data:
    driver: local
  mlflow_minio_data:
    driver: local

# ==================== Networks ====================
networks:
  data-platform-net:
    external: true
